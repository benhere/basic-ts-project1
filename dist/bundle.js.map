{"version":3,"file":"bundle.js","mappings":"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","sources":["webpack://ts-project1/./src/components/base-component.ts","webpack://ts-project1/./src/util/validation.ts","webpack://ts-project1/./src/decorators/autobind.ts","webpack://ts-project1/./src/models/project.ts","webpack://ts-project1/./src/state/project-state.ts","webpack://ts-project1/./src/components/project-input.ts","webpack://ts-project1/./src/components/project-item.ts","webpack://ts-project1/./src/components/project-list.ts","webpack://ts-project1/./src/app.ts"],"sourcesContent":["\r\n\r\n// Generic Component Base class\r\nexport abstract class Component<T extends HTMLElement, U extends HTMLElement> {\r\n  templateElement: HTMLTemplateElement;\r\n  hostElement: T;\r\n  element: U;\r\n\r\n  constructor(\r\n    templateId: string,\r\n    hostElementId: string,\r\n    insertAtStart: boolean,\r\n    newElementId?: string\r\n  ) {\r\n    this.templateElement = document.getElementById(\r\n      templateId\r\n    )! as HTMLTemplateElement;\r\n    this.hostElement = document.getElementById(hostElementId)! as T;\r\n\r\n    const importedNode = document.importNode(\r\n      this.templateElement.content,\r\n      true\r\n    );\r\n    this.element = importedNode.firstElementChild as U;\r\n    if (newElementId) {\r\n      this.element.id = newElementId;\r\n    }\r\n\r\n    this.attach(insertAtStart);\r\n    // this.renderContent();\r\n    // this.configure();\r\n  }\r\n\r\n  private attach(insertAtBeg: boolean) {\r\n    this.hostElement.insertAdjacentElement(\r\n      insertAtBeg ? \"afterbegin\" : \"beforeend\",\r\n      this.element\r\n    );\r\n  }\r\n\r\n  abstract configure(): void;\r\n  abstract renderContent(): void;\r\n}\r\n","\r\n\r\n// validation logic\r\nexport interface Validatable {\r\n  value: string | number;\r\n  required?: boolean;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nexport function validate(validatableInput: Validatable) {\r\n  let isValid = true;\r\n  if (validatableInput.required) {\r\n    isValid = isValid && validatableInput.value.toString().trim().length !== 0;\r\n  }\r\n  if (\r\n    validatableInput.minLength != null &&\r\n    typeof validatableInput.value === \"string\"\r\n  ) {\r\n    isValid =\r\n      isValid && validatableInput.value.length >= validatableInput.minLength;\r\n  }\r\n  if (\r\n    validatableInput.maxLength != null &&\r\n    typeof validatableInput.value === \"string\"\r\n  ) {\r\n    isValid =\r\n      isValid && validatableInput.value.length <= validatableInput.maxLength;\r\n  }\r\n  if (\r\n    validatableInput.min != null &&\r\n    typeof validatableInput.value === \"number\"\r\n  ) {\r\n    isValid = isValid && validatableInput.value >= validatableInput.min;\r\n  }\r\n  if (\r\n    validatableInput.max != null &&\r\n    typeof validatableInput.value === \"number\"\r\n  ) {\r\n    isValid = isValid && validatableInput.value <= validatableInput.max;\r\n  }\r\n  return isValid;\r\n}\r\n","\r\n\r\n// autobind decorator\r\nexport function autoBind(_: any, _2: string, descriptor: PropertyDescriptor) {\r\n  const originalMethod = descriptor.value;\r\n  const adjDescriptor: PropertyDescriptor = {\r\n    configurable: true,\r\n    get() {\r\n      const boundFn = originalMethod.bind(this);\r\n      return boundFn;\r\n    },\r\n  };\r\n  return adjDescriptor;\r\n}\r\n","\r\n\r\n// Project status\r\nexport enum ProjectStatus {\r\n  Active,\r\n  Finished,\r\n}\r\n\r\n// Project type class\r\n\r\nexport class Project {\r\n  constructor(\r\n    public id: string,\r\n    public title: string,\r\n    public description: string,\r\n    public people: number,\r\n    public status: ProjectStatus\r\n  ) {}\r\n}\r\n","\r\nimport { Project, ProjectStatus } from \"../models/project\";\r\n\r\n// Project State Management class\r\ntype Listener<T> = (items: T[]) => void;\r\n\r\nclass State<T> {\r\n  protected listeners: Listener<T>[] = [];\r\n\r\n  addListener(listenerFn: Listener<T>) {\r\n    this.listeners.push(listenerFn);\r\n  }\r\n}\r\n\r\nexport class ProjectState extends State<Project> {\r\n  private projects: Project[] = [];\r\n  private static instance: ProjectState;\r\n\r\n  private constructor() {\r\n    super();\r\n  }\r\n\r\n  static getInstance() {\r\n    if (this.instance) {\r\n      return this.instance;\r\n    }\r\n    this.instance = new ProjectState();\r\n    return this.instance;\r\n  }\r\n\r\n  // this method will be called when a project should be added and rendered\r\n  addProject(title: string, description: string, numOfPeople: number) {\r\n    const newProject = new Project(\r\n      Math.floor(Math.random()).toString(),\r\n      title,\r\n      description,\r\n      numOfPeople,\r\n      ProjectStatus.Active\r\n    );\r\n\r\n    this.projects.push(newProject);\r\n    this.updateListeners();\r\n  }\r\n\r\n  moveProject(projectId: string, newStatus: ProjectStatus) {\r\n    const project = this.projects.find((prj) => prj.id === projectId);\r\n    if (project && project.status !== newStatus) {\r\n      project.status = newStatus;\r\n      this.updateListeners();\r\n    }\r\n  }\r\n\r\n  private updateListeners() {\r\n    for (const listenerFn of this.listeners) {\r\n      listenerFn(this.projects.slice());\r\n    }\r\n  }\r\n}\r\n\r\nexport const projectState = ProjectState.getInstance();\r\n","\r\nimport { Component } from './base-component'\r\nimport * as Validation from '../util/validation'\r\nimport { autoBind } from '../decorators/autobind'\r\nimport { projectState } from '../state/project-state'\r\n\r\n// ProjectInput class\r\nexport class ProjectInput extends Component<HTMLDivElement, HTMLFormElement> {\r\n  titleInputElement: HTMLInputElement;\r\n  descriptionInputElement: HTMLInputElement;\r\n  peopleInputElement: HTMLInputElement;\r\n\r\n  constructor() {\r\n    super(\"project-input\", \"app\", true, \"user-input\");\r\n\r\n    this.titleInputElement = this.element.querySelector(\r\n      \"#title\"\r\n    ) as HTMLInputElement;\r\n    this.descriptionInputElement = this.element.querySelector(\r\n      \"#description\"\r\n    ) as HTMLInputElement;\r\n    this.peopleInputElement = this.element.querySelector(\r\n      \"#people\"\r\n    ) as HTMLInputElement;\r\n\r\n    this.configure();\r\n  }\r\n\r\n  configure() {\r\n    this.element.addEventListener(\"submit\", this.submitHandler.bind(this));\r\n  }\r\n\r\n  renderContent(): void {}\r\n\r\n  private gatherUserInput(): [string, string, number] | void {\r\n    const enteredTitle = this.titleInputElement.value;\r\n    const enteredDesc = this.descriptionInputElement.value;\r\n    const enteredPeople = this.peopleInputElement.value;\r\n\r\n    const titleValidatable: Validation.Validatable = {\r\n      value: enteredTitle,\r\n      required: true,\r\n    };\r\n\r\n    const descValidatable: Validation.Validatable = {\r\n      value: enteredDesc,\r\n      required: true,\r\n      minLength: 9,\r\n    };\r\n\r\n    const peopleValidatable: Validation.Validatable = {\r\n      value: +enteredPeople,\r\n      required: true,\r\n      min: 1,\r\n      max: 9,\r\n    };\r\n\r\n    if (\r\n      !Validation.validate(titleValidatable) ||\r\n      !Validation.validate(descValidatable) ||\r\n      !Validation.validate(peopleValidatable)\r\n    ) {\r\n      alert(\"Invalid input, please try again!\");\r\n      return;\r\n    } else {\r\n      return [enteredTitle, enteredDesc, +enteredPeople];\r\n    }\r\n  }\r\n\r\n  private clearInputs() {\r\n    this.titleInputElement.value = \"\";\r\n    this.descriptionInputElement.value = \"\";\r\n    this.peopleInputElement.value = \"\";\r\n  }\r\n\r\n  @autoBind\r\n  private submitHandler(event: Event) {\r\n    event.preventDefault();\r\n    const userInput = this.gatherUserInput();\r\n    if (Array.isArray(userInput)) {\r\n      const [title, desc, people] = userInput;\r\n      // console.log(title, desc, people);\r\n      projectState.addProject(title, desc, people);\r\n      this.clearInputs();\r\n    }\r\n    // console.log(this.titleInputElement.value);\r\n  }\r\n}\r\n","\r\nimport { Draggable } from '../models/drag-drop';\r\nimport { Project } from '../models/project'\r\nimport { Component } from './base-component'\r\nimport { autoBind } from '../decorators/autobind'\r\n\r\n// ProjectItem class - it will render single project item\r\nexport class ProjectItem\r\nextends Component<HTMLUListElement, HTMLLIElement>\r\nimplements Draggable\r\n{\r\nprivate project: Project;\r\n\r\nget persons() {\r\n  if (this.project.people === 1) {\r\n    return \"1 person\";\r\n  } else {\r\n    return `${this.project.people} persons`;\r\n  }\r\n}\r\nconstructor(hostId: string, project: Project) {\r\n  super(\"single-project\", hostId, false, project.id);\r\n  this.project = project;\r\n\r\n  this.configure();\r\n  this.renderContent();\r\n}\r\n\r\n@autoBind\r\ndragStartHandler(event: DragEvent): void {\r\n  // console.log(\"Event details:\",event);\r\n  event.dataTransfer!.setData(\"text/plain\", this.project.id);\r\n  event.dataTransfer!.effectAllowed = \"move\";\r\n}\r\n\r\ndragEndHandler(_: DragEvent): void {\r\n  console.log(\"DragEnd event occured\");\r\n}\r\n\r\nconfigure(): void {\r\n  this.element.addEventListener(\"dragstart\", this.dragStartHandler);\r\n  this.element.addEventListener(\"dragend\", this.dragEndHandler);\r\n}\r\n\r\nrenderContent(): void {\r\n  this.element.querySelector(\"h2\")!.textContent = this.project.title;\r\n  this.element.querySelector(\"h3\")!.textContent =\r\n    this.persons + \" assigned\";\r\n  this.element.querySelector(\"p\")!.textContent = this.project.description;\r\n}\r\n}","\r\nimport { Component } from './base-component'\r\nimport { autoBind } from '../decorators/autobind'\r\nimport { projectState } from '../state/project-state'\r\nimport { DragTarget } from '../models/drag-drop.js';\r\nimport { Project, ProjectStatus } from '../models/project';\r\nimport { ProjectItem } from './project-item';\r\n\r\n// ProjectList class\r\nexport class ProjectList\r\n  extends Component<HTMLDivElement, HTMLElement>\r\n  implements DragTarget\r\n{\r\n  assignedProjects: Project[];\r\n\r\n  constructor(private type: \"active\" | \"finished\") {\r\n    super(\"project-list\", \"app\", false, `${type}-projects`);\r\n    this.assignedProjects = [];\r\n\r\n    this.configure();\r\n    this.renderContent();\r\n  }\r\n\r\n  @autoBind\r\n  dragOverHandler(event: DragEvent): void {\r\n    if (event.dataTransfer && event.dataTransfer.types[0] === \"text/plain\") {\r\n      event.preventDefault(); //to allow drop event\r\n      const listEle = this.element.querySelector(\"ul\")!;\r\n      listEle.classList.add(\"droppable\");\r\n    }\r\n  }\r\n\r\n  @autoBind\r\n  dropHandler(event: DragEvent) {\r\n    console.log(\"Dragged data:\", event.dataTransfer!.getData(\"text/plain\"));\r\n    const prjId = event.dataTransfer!.getData(\"text/plain\");\r\n    projectState.moveProject(\r\n      prjId,\r\n      this.type === \"active\" ? ProjectStatus.Active : ProjectStatus.Finished\r\n    );\r\n  }\r\n\r\n  @autoBind\r\n  dragLeaveHandler(_: DragEvent) {\r\n    const listEle = this.element.querySelector(\"ul\")!;\r\n    listEle.classList.remove(\"droppable\");\r\n  }\r\n\r\n  configure() {\r\n    this.element.addEventListener(\"dragover\", this.dragOverHandler);\r\n    this.element.addEventListener(\"dragleave\", this.dragLeaveHandler);\r\n    this.element.addEventListener(\"drop\", this.dropHandler);\r\n\r\n    projectState.addListener((projects: Project[]) => {\r\n      // filter projects based on active & finished status\r\n      const relevantProjects = projects.filter((pr) => {\r\n        if (this.type === \"active\") {\r\n          return pr.status === ProjectStatus.Active;\r\n        }\r\n        return pr.status === ProjectStatus.Finished;\r\n      });\r\n      this.assignedProjects = relevantProjects;\r\n      this.renderProjects();\r\n    });\r\n  }\r\n\r\n  renderContent() {\r\n    const listId = `${this.type}-project-list`;\r\n    this.element.querySelector(\"ul\")!.id = listId;\r\n    this.element.querySelector(\"h2\")!.textContent =\r\n      this.type.toUpperCase() + \" PROJECTS\";\r\n  }\r\n\r\n  renderProjects() {\r\n    const listElement = document.getElementById(\r\n      `${this.type}-project-list`\r\n    )! as HTMLUListElement;\r\n    listElement.innerHTML = \"\";\r\n    for (const prjItem of this.assignedProjects) {\r\n      new ProjectItem(this.element.querySelector(\"ul\")!.id, prjItem);\r\n    }\r\n  }\r\n}\r\n","\r\n// basic TS project\r\n\r\nimport { ProjectInput } from \"./components/project-input\";\r\nimport { ProjectList } from \"./components/project-list\";\r\n\r\nnew ProjectInput();\r\nnew ProjectList(\"active\");\r\nnew ProjectList(\"finished\");\r\n"],"names":["Component","constructor","templateId","hostElementId","insertAtStart","newElementId","this","templateElement","document","getElementById","hostElement","importedNode","importNode","content","element","firstElementChild","id","attach","insertAtBeg","insertAdjacentElement","validate","validatableInput","isValid","required","value","toString","trim","length","minLength","maxLength","min","max","autoBind","_","_2","descriptor","originalMethod","configurable","get","bind","ProjectStatus","Project","title","description","people","status","State","listeners","addListener","listenerFn","push","ProjectState","super","projects","getInstance","instance","addProject","numOfPeople","newProject","Math","floor","random","Active","updateListeners","moveProject","projectId","newStatus","project","find","prj","slice","projectState","ProjectInput","titleInputElement","querySelector","descriptionInputElement","peopleInputElement","configure","addEventListener","submitHandler","renderContent","gatherUserInput","enteredTitle","enteredDesc","enteredPeople","descValidatable","peopleValidatable","alert","clearInputs","event","preventDefault","userInput","Array","isArray","desc","ProjectItem","persons","hostId","dragStartHandler","dataTransfer","setData","effectAllowed","dragEndHandler","console","log","textContent","ProjectList","type","assignedProjects","dragOverHandler","types","classList","add","dropHandler","getData","prjId","Finished","dragLeaveHandler","remove","relevantProjects","filter","pr","renderProjects","listId","toUpperCase","innerHTML","prjItem"],"sourceRoot":""}